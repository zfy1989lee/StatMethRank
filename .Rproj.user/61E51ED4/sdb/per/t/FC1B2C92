{
    "contents" : "#' Test for Agreement of Ranking Data Among Groups\n#'\n#' This function performs a test of agreement among groups.\n#'\n#' @param data a data frame of the frequencies of all possible rankings \n#' given by different groups \n#' @param method whether the test is based on Spearman metric or Kendall metric\n#' @return a list of test statistics\n#' @export\n#' @author Li Qinglong <liqinglong0830@@163.com>\n#' @examples\n#' data(Sutton)\n#' agreement.test(Sutton, method = \"spearman\")\n#' agreement.test(Sutton, method = \"kendall\")\n#' @references Intergroup Diversity and Concordance for Ranking Data: An Approach via \n#' Metrics for Permuatations, Paul D. Feigin and Mayer Alvo\nagreement.test <- function(data, method = c(\"spearman\", \"kendall\"))\n{\n    \n    facItems = dim(data)[1] # number of n!\n    nMax = 15\n    nItems = sum(facItems / cumprod(1:nMax) >= 1) # solve n from n! \n    nGroups = dim(data)[2] - nItems # number of populations\n\n    n = colSums(data[, nItems + seq(nGroups)]) # number of observations in each group\n    N = sum(n) # number of total observations\n    lambda = n / N # Proportion in each group\n    # relative frequency of occurrence of each ranking\n    p = mapply(\"/\", data[nItems + seq(nGroups)], n)\n\n    method = match.arg(method)\n    if (method == \"spearman\")\n    {\n        T = t(data[, 1:nItems]) - (nItems + 1) / 2\n        C = nItems * (nItems^2 - 1) / 12\n    }\n    else if (method == \"kendall\")\n    {\n        Tkj = matrix(rep(c(t(data[, 1:nItems])), rep(0:(nItems - 1), facItems)), nrow = nItems)\n        Tki = matrix(rep(c(t(data[, 1:nItems])), rep((nItems - 1):0, facItems)), nrow = nItems)\n        T = sign(Tkj - Tki)\n        C = nItems * (nItems - 1) / 2\n    }\n\n    # Relative frquency vector \n    f = p %*% lambda\n    # Diversity apportionment\n    H_total = C - t(f) %*% t(T) %*% T %*% f\n    H_within = C - sum(colSums((T %*% p)^2) * lambda)\n    H_between = H_total - H_within\n    # Relative Diversity\n    alpha = H_within / H_total\n    # Relative Similarity\n    pho = (C - H_total) / (C - H_within)\n\n\n    if (nGroups == 2)\n    {\n        Sigma_separate = matrix(0, nrow = facItems, ncol = facItems)\n        Sigma_pooled = matrix(0, nrow = facItems, ncol = facItems)\n        for (i in 1:2)\n        {\n            Sigma_separate = Sigma_separate + (diag(p[, i]) - p[, i] %*% t(p[, i])) / (n[i] - 1)\n            Sigma_pooled = Sigma_pooled + (diag(p[, i])- p[, i] %*% t(p[, i])) * n[i]\n        }\n        Sigma_separate = Sigma_separate * N\n        Sigma_pooled = Sigma_pooled * N / (N-2) * sum(1 / n)\n\n        # Separate tests    \n        D_separate = ginv(T %*% Sigma_separate %*% t(T))\n        # Degree of freedom of chi-square test statistic\n        df = qr(T %*% Sigma_separate %*% t(T))$rank\n        # chi-square test statistic\n        chisq_separate = N * t(p[, 1] - p[, 2]) %*% t(T) %*% D_separate %*% T %*% (p[, 1] - p[, 2])\n        # F separate test statistic(df, min(n1,n2)-df)\n        F_separate = (min(n) - df) / ((min(n) - 1) * df) * chisq_separate\n        \n        p_value = 1 - pchisq(chisq_separate, df)\n        chisq_separate = list(stat = chisq_separate, df = df, p_value = p_value)\n        # Degree of freedom of F test statistic\n        df = c(df, min(n) - df)\n        p_value = 1 - pf(F_separate, df[1], df[2])\n        F_separate = list(stat = F_separate, df = df, p_value = p_value)\n\n        # Pooled tests\n        # D_pooled = MASS::ginv(T %*% Sigma_pooled %*% t(T))\n\t\tD_pooled = ginv(T %*% Sigma_pooled %*% t(T))\n        # Degree of freedom of chi-square test statistics\n        df = qr(T %*% Sigma_pooled %*% t(T))$rank\n        # chi-square test statistic\n        chisq_pooled = N * t(p[, 1] - p[, 2]) %*% t(T) %*% D_pooled %*% T %*% (p[, 1] - p[, 2])\n        # F pooled test statistic(df, N-1-df)\n        F_pooled = (N - df - 1) / ((N - 2) * df) * chisq_pooled    \n\n        p_value = 1 - pchisq(chisq_pooled, df)\n        chisq_pooled = list(stat = chisq_pooled, df = df, p_value = p_value)\n        df = c(df, N - df - 1)\n        p_value = 1 - pf(F_pooled, df[1], df[2])\n        F_pooled = list(stat = F_pooled, df = df, p_value = p_value)\n\n        res = list( Within_Diversity = H_within,\n                    Between_Diversity = H_between,\n                    Total_Diversity = H_total,\n                    Relative_Diversity = alpha,\n                    Relative_Similarity = pho,\n                    Separate_Chi_square = chisq_separate,\n                    F_separate = F_separate,\n                    Pooled_Chi_square = chisq_pooled,\n                    F_pooled = F_pooled\n                )\n    }    \n    else\n    {\n        res = list( Within_Diversity = H_within,\n                    Between_Diversity = H_between,\n                    Total_Diversity = H_total,\n                    Relative_Diversity = alpha,\n                    Relative_Similarity = pho\n                )\n\n    }\n    return(res)\n}",
    "created" : 1413911322854.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1435216051",
    "id" : "FC1B2C92",
    "lastKnownWriteTime" : 1390389940,
    "path" : "F:/Dropbox/StatMethRank/R/agreement.test.R",
    "project_path" : "R/agreement.test.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}